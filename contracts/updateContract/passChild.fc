;; imports
#include "../imports/stdlib.fc";
#include "../passUtils.fc";
#include "../utilits/messages.func";
#include "../utilits/op-codes.func";
#include "../utilits/error-codes.func";
;;



(cell, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_ref(),
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_ref());
}

() save_data (cell itemText, slice owner_address, slice master_address, cell master_code) impure inline {
    set_data(
        pack_pass_child_data(itemText,
            owner_address,
            master_address,
            master_code)
    );
}

() receive_tokens (slice in_msg_body) impure inline_ref {
    ;; NOTE we can not allow fails in action phase since in that case there will be
    ;; no bounce. Thus check and throw in computation phase.
    (cell itemText, slice owner_address, slice master_address, cell master_code) = load_data();
    cell jetton_amount = in_msg_body~load_ref();
    itemText = jetton_amount;

    save_data(itemText, owner_address, master_address, master_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    int op = in_msg_body~load_op();

    if (op == op::internal_transfer) { ;; incoming transfer
        receive_tokens(in_msg_body);
        return ();
    }

    if(op == op::change_cod) {
        (cell itemText, slice owner_address, slice master_address, cell master_code) = load_data();

        cell new_itemText = in_msg_body~load_ref();

        save_data(new_itemText, owner_address, master_address, master_code);

        int coins = get_balance().pair_first();
        if(coins > 2000000000) {
            int sendCoins = coins - 1000000000;
            cell newMsg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(master_address)
            .store_coins(sendCoins)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
            send_raw_message(newMsg, 0);
        }
        return ();
    }

    throw(error::unknown_action);
}


(cell, slice, slice, cell) get_wallet_data() method_id {
    return load_data();
}

int get_balance_contract() method_id {
    int balance = get_balance().pair_first();
    return balance;
}
